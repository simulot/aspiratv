// Code generated by "enumer -type=PoolRhythmType -json"; DO NOT EDIT.

//
package models

import (
	"encoding/json"
	"fmt"
)

const _PoolRhythmTypeName = "RhythmUnknownRhythmDailyRhythmWeeklyMonthly"

var _PoolRhythmTypeIndex = [...]uint8{0, 13, 24, 36, 43}

func (i PoolRhythmType) String() string {
	if i < 0 || i >= PoolRhythmType(len(_PoolRhythmTypeIndex)-1) {
		return fmt.Sprintf("PoolRhythmType(%d)", i)
	}
	return _PoolRhythmTypeName[_PoolRhythmTypeIndex[i]:_PoolRhythmTypeIndex[i+1]]
}

var _PoolRhythmTypeValues = []PoolRhythmType{0, 1, 2, 3}

var _PoolRhythmTypeNameToValueMap = map[string]PoolRhythmType{
	_PoolRhythmTypeName[0:13]:  0,
	_PoolRhythmTypeName[13:24]: 1,
	_PoolRhythmTypeName[24:36]: 2,
	_PoolRhythmTypeName[36:43]: 3,
}

// PoolRhythmTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PoolRhythmTypeString(s string) (PoolRhythmType, error) {
	if val, ok := _PoolRhythmTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PoolRhythmType values", s)
}

// PoolRhythmTypeValues returns all values of the enum
func PoolRhythmTypeValues() []PoolRhythmType {
	return _PoolRhythmTypeValues
}

// IsAPoolRhythmType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PoolRhythmType) IsAPoolRhythmType() bool {
	for _, v := range _PoolRhythmTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PoolRhythmType
func (i PoolRhythmType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PoolRhythmType
func (i *PoolRhythmType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PoolRhythmType should be a string, got %s", data)
	}

	var err error
	*i, err = PoolRhythmTypeString(s)
	return err
}
