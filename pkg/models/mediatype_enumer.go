// Code generated by "enumer -type=MediaType -json"; DO NOT EDIT.

//
package models

import (
	"encoding/json"
	"fmt"
)

const _MediaTypeName = "TypeUnknownTypeCollectionTypeSeriesTypeTVShowTypeMovie"

var _MediaTypeIndex = [...]uint8{0, 11, 25, 35, 45, 54}

func (i MediaType) String() string {
	if i < 0 || i >= MediaType(len(_MediaTypeIndex)-1) {
		return fmt.Sprintf("MediaType(%d)", i)
	}
	return _MediaTypeName[_MediaTypeIndex[i]:_MediaTypeIndex[i+1]]
}

var _MediaTypeValues = []MediaType{0, 1, 2, 3, 4}

var _MediaTypeNameToValueMap = map[string]MediaType{
	_MediaTypeName[0:11]:  0,
	_MediaTypeName[11:25]: 1,
	_MediaTypeName[25:35]: 2,
	_MediaTypeName[35:45]: 3,
	_MediaTypeName[45:54]: 4,
}

// MediaTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MediaTypeString(s string) (MediaType, error) {
	if val, ok := _MediaTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MediaType values", s)
}

// MediaTypeValues returns all values of the enum
func MediaTypeValues() []MediaType {
	return _MediaTypeValues
}

// IsAMediaType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MediaType) IsAMediaType() bool {
	for _, v := range _MediaTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MediaType
func (i MediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MediaType
func (i *MediaType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MediaType should be a string, got %s", data)
	}

	var err error
	*i, err = MediaTypeString(s)
	return err
}
