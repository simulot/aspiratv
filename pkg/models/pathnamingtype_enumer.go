// Code generated by "enumer -type=PathNamingType -json"; DO NOT EDIT.

//
package models

import (
	"encoding/json"
	"fmt"
)

const _PathNamingTypeName = "PathTypeUnknownPathTypeCollectionPathTypeSeriesPathTypeTVShowPathTypeMoviePathTypeCustom"

var _PathNamingTypeIndex = [...]uint8{0, 15, 33, 47, 61, 74, 88}

func (i PathNamingType) String() string {
	if i < 0 || i >= PathNamingType(len(_PathNamingTypeIndex)-1) {
		return fmt.Sprintf("PathNamingType(%d)", i)
	}
	return _PathNamingTypeName[_PathNamingTypeIndex[i]:_PathNamingTypeIndex[i+1]]
}

var _PathNamingTypeValues = []PathNamingType{0, 1, 2, 3, 4, 5}

var _PathNamingTypeNameToValueMap = map[string]PathNamingType{
	_PathNamingTypeName[0:15]:  0,
	_PathNamingTypeName[15:33]: 1,
	_PathNamingTypeName[33:47]: 2,
	_PathNamingTypeName[47:61]: 3,
	_PathNamingTypeName[61:74]: 4,
	_PathNamingTypeName[74:88]: 5,
}

// PathNamingTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PathNamingTypeString(s string) (PathNamingType, error) {
	if val, ok := _PathNamingTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PathNamingType values", s)
}

// PathNamingTypeValues returns all values of the enum
func PathNamingTypeValues() []PathNamingType {
	return _PathNamingTypeValues
}

// IsAPathNamingType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PathNamingType) IsAPathNamingType() bool {
	for _, v := range _PathNamingTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PathNamingType
func (i PathNamingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PathNamingType
func (i *PathNamingType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PathNamingType should be a string, got %s", data)
	}

	var err error
	*i, err = PathNamingTypeString(s)
	return err
}
